{"version":3,"sources":["constants.js"],"names":[],"mappings":";;;;;;QAqEgB,W,GAAA,W;;AAhEhB;;;;AACA;;;;;;;;;;;;;;AAOO,MAAM,oCAAc,gBAAM,aAA1B;;;;;;;;;AASP,MAAM,SAAS,MAAf;;;;;;;;;;;;;;;;;;;;AAoBA,MAAM,aAAa,CAAE,MAAF,EAAU,SAAV,EAAqB,OAArB,EAA8B,OAA9B,EAAuC,MAAvC,EAA+C,KAA/C,EAAsD,MAAtD,CAAnB,C;;;;AAIA,MAAM,OAAO,oCAAS,GAAG,WAAW,GAAX,CAAgB,SAAS,SAAS,KAAlC,EACtB,MADsB,CACb,IAAG,MAAQ,WADE,CAAZ,CAAb;;;;;;;;;;;;;;;;;;;;;AAuBO,SAAS,WAAT,CAAsB,WAAtB,EAAoC;;AAEzC,MAAI,KAAK,MAAO,KAAhB;AACA,QAAM,SAAS,IAAI,GAAJ,EAAf;;AAEA,MAAK,OAAO,WAAP,KAAuB,UAA5B,EAAyC;AACvC,SAAK,WAAL;AACD;;AAED,aAAW,MAAX,CAAmB,CAAE,MAAF,EAAU,MAAV,KAAsB;AACvC,QAAI,MAAM,GAAI,MAAJ,CAAV;;AAEA,QAAK,WAAW,MAAhB,EAAyB;;;;AAIvB,YAAM,CAAC,OAAO,MAAP,CAAc,GAAd,CAAmB,MAAnB,CAAD,KAAkC,OAAO,UAAP,IAAqB,GAAvD,CAAN;AACA,aAAO,UAAP,GAAoB,GAApB;AACD;;AAED,WAAO,MAAP,CAAc,GAAd,CAAmB,MAAnB,EAA2B,GAA3B;;AAEA,WAAO,MAAP;AACD,GAdD,EAcG;AACD,gBAAY,KADX;AAED;AAFC,GAdH;;AAmBA,SAAO,MAAP;AACD;;AAEM,MAAM,8CAAmB,YAAa,UAAU,qBAAsB,IAAtB,EAA6B,IAAG,MAAQ,KAAG,MAAQ,GAAnD,CAAvB,CAAzB;;;;;;;;;;;AAWA,MAAM,sCAAe,KAAK,GAAL,CAAW,IAAG,MAAQ,WAAtB,KAAqC,cAA1D;;;;;;;;;AASP,SAAS,oBAAT,CAA+B,IAA/B,EAAqC,IAArC,EAA4C;;;;AAI1C,SAAO,KAAK,GAAL,CAAU,IAAV,MAAqB,IAArB,IAA6B,KAAK,GAAL,CAAU,IAAV,MAAqB,OAAlD,IAA6D,KAAK,GAAL,CAAU,IAAV,MAAqB,KAAzF;AACD;;;;;;;;;;;AAWM,MAAM,sBAAO,iBAAiB,GAAjB,CAAsB,MAAtB,CAAb;;;;;;;;;;;;;;;;AAgBA,MAAM,4BAAU,iBAAiB,GAAjB,CAAsB,SAAtB,CAAhB;;;;;;;;;;;;;;;;;;AAkBA,MAAM,wBAAQ,iBAAiB,GAAjB,CAAsB,OAAtB,CAAd;;;;;;;;;;;;;;;;;;;AAmBA,MAAM,wBAAQ,iBAAiB,GAAjB,CAAsB,OAAtB,CAAd;;;;;;;;;;;;;;;;;;;;AAoBA,MAAM,sBAAO,iBAAiB,GAAjB,CAAsB,MAAtB,CAAb;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAM,oBAAM,iBAAiB,GAAjB,CAAsB,KAAtB,CAAZ;;;;;;;;;;;;;;;;;;;;AAoBA,MAAM,sBAAO,iBAAiB,GAAjB,CAAsB,MAAtB,CAAb","file":"constants.js","sourcesContent":["/**\n * Constants module.\n *\n * @module constants\n */\nimport chalk from 'chalk';\nimport { getOpts } from 'utility-node-opts-parser';\n\n/**\n * @summary Indicating if the environment support colours, powered by `supports-color` in `chalk`.\n *\n * @type {Boolean}\n */\nexport const IS_COLOURED = chalk.supportsColor;\n\n/**\n * @summary The prefix of environment variable\n *\n * @default `LOG_`\n *\n * @type {String}\n */\nconst PREFIX = 'LOG_';\n\n/**\n * @summary The supported log levels.\n *\n * @desc The currently supported log levels are\n *\n * | Level   | Description |\n * | ------- | ----------- |\n * | MUTE    | Avoid all outputs |\n * | INFO    | Informational outputs |\n * | LOG     | Generic logging, when enabled, the outputs of INFO will also be printed. |\n * | WARN    | Warning, when enabled, the outputs of INFO and LOG will also be printed. |\n * | ERROR   | Errors, when enabled, the outputs of INFO, LOG and WARN will also be printed |\n * | DEBUG   | Debugging information, when enabled, the outputs of INFO, LOG, WARN and ERROR will also be printed |\n * | VERBOSE | Anything, including the outputs of all of the other logging levels. |\n *\n * @constant\n * @type {Array}\n */\nconst LOG_LEVELS = [ 'MUTE', 'VERBOSE', 'DEBUG', 'ERROR', 'WARN', 'LOG', 'INFO' ]; // strictly ordered, so that the previous one override the next one.\n\n// external opts in the arguments to start the application or from the environment variables\n// prefer to set in the environment variables\nconst opts = getOpts( ...LOG_LEVELS.map( level => PREFIX + level )\n  .concat( `${ PREFIX }TIME_FMT` ) );\n\n\n/**\n * @summary Function to generate the value of log value.\n *\n * @desc The result will be used to do logic operation.\n *\n * @callback logLvlValFn\n *\n * @param  {String} logLvl Log level such as `INFO`\n *\n * @return {Boolean}    The value of the log level should be, regardless the other log levels.\n */\n\n/**\n * @summary Generate log level switches, based on the given log level value calculate function and the pre-set log level override logic.\n *\n * @param  {logLvlValFn} logLvlValFn  Function to generate the value of log value.\n *\n * @return {Map}    Result map with data in `{ logLvl: Boolean }` format.\n */\nexport function genLogLevel( logLvlValFn ) {\n\n  let fn = ( ) => false;\n  const result = new Map( );\n\n  if ( typeof logLvlValFn === 'function' ) {\n    fn = logLvlValFn;\n  }\n\n  LOG_LEVELS.reduce( ( status, logLvl ) => {\n    let val = fn( logLvl );\n\n    if ( logLvl !== 'MUTE' ) {\n\n      // it's the other log levels\n\n      val = !status.result.get( 'MUTE' ) && ( status.currentLvl || val );\n      status.currentLvl = val;\n    }\n\n    status.result.set( logLvl, val );\n\n    return status;\n  }, {\n    currentLvl: false,\n    result\n  } );\n\n  return result;\n}\n\nexport const defaultLogLevels = genLogLevel( logLvl => _genericEnableStatus( opts, `${ PREFIX }${ logLvl }` ) );\n\n/**\n * @summary The time format when logging.\n *\n * @desc This value can be set from environment variable `LOG_TIME_FMT`\n *\n * @default `'HH.mm.ss.SSS'`\n *\n * @type {String}\n */\nexport const OUT_TIME_FMT = opts.get( `${ PREFIX }TIME_FMT` ) || 'HH.mm.ss.SSS';\n\n/**\n * @summary Generic function to check if a flag has been set to non-`false` value.\n *\n * @param  {Map} opts A map with items of `{ optName: value|null }` format.\n * @param  {String} flag The flag to be verified\n * @return {Boolean}    `true` when the flag is set and the value isn't `false`\n */\nfunction _genericEnableStatus( opts, flag ) {\n  // if the flag is set and the value is not `false`.\n  // even CLI only have text, namely Boolean `false` will be `'false'`,\n  // still append the Boolean value check.\n  return opts.get( flag ) !== null && opts.get( flag ) !== 'false' && opts.get( flag ) !== false;\n}\n\n/**\n * @summary Log level - Mute\n *\n * @desc If MUTE is `true`, the log using all of the logging APIs will not be printed to stdout.\n *\n * MUTE is `true` if LOG_MUTE is set in the environment variable and the value is not `false`.\n *\n * @type {Boolean}\n */\nexport const MUTE = defaultLogLevels.get( 'MUTE' );\n\n/**\n * @summary Log level - Verbose\n *\n * @desc If VERBOSE is `true`, the log using the `verbose` APIs will be printed to stdout.\n *\n * The outputs of all of the other logging levels will be printed to stdout.\n *\n * VERBOSE is `true` if\n *\n * - MUTE is `false` and\n * - VERBOSE is set in the environment variable and the value is not `false`\n *\n * @type {Boolean}\n */\nexport const VERBOSE = defaultLogLevels.get( 'VERBOSE' );\n\n/**\n * @summary Log level - Debug\n *\n * @desc If DEBUG is `true`, the log using the `debug` APIs will be printed to stdout.\n *\n * The outputs of INFO, LOG, WARN and ERROR will also be printed.\n *\n * DEBUG is `true` if\n *\n * - MUTE is `false` and\n * - and\n *   - DEBUG is set in the environment variable and the value is not `false`\n *   - or VERBOSE is `true`\n *\n * @type {Boolean}\n */\nexport const DEBUG = defaultLogLevels.get( 'DEBUG' );\n\n/**\n * @summary Log level - Error\n *\n * @desc If ERROR is `true`, the log using the `error` API will be printed to stdout.\n *\n * The outputs of INFO, LOG and WARN will also be printed.\n *\n * ERROR is `true` if\n *\n * - MUTE is `false`\n * - and\n *   - ERROR is set in the environment variable and the value is not `false`\n *   - or DEBUG is `true`\n *   - or VERBOSE is `true`\n *\n * @type {Boolean}\n */\nexport const ERROR = defaultLogLevels.get( 'ERROR' );\n\n/**\n * @summary Log level - Warn\n *\n * @desc If WARN is `true`, the log using the `warn` API will be printed to stdout.\n *\n * The outputs of INFO and LOG will also be printed.\n *\n * WARN is `true` if\n *\n * - MUTE is `false`\n * - and\n *   - WARN is set in the environment variable and the value is not `false`\n *   - or ERROR is `true`\n *   - or DEBUG is `true`\n *   - or VERBOSE is `true`\n *\n * @type {Boolean}\n */\nexport const WARN = defaultLogLevels.get( 'WARN' );\n\n/**\n * @summary Log level - Log\n *\n * @desc If LOG is `true`, the log using the `log` API will be printed to stdout.\n *\n * The outputs of INFO will also be printed.\n *\n * LOG is `true` if\n *\n * - MUTE is `false`\n * - and\n *   - LOG is set in the environment variable and the value is not `false`\n *   - or WARN is `true`\n *   - or ERROR is `true`\n *   - or DEBUG is `true`\n *   - or VERBOSE is `true`\n *\n * @type {Boolean}\n */\nexport const LOG = defaultLogLevels.get( 'LOG' );\n\n/**\n * @summary Log level - Info\n *\n * @desc If INFO is `true`, the log using the `info` API will be printed to stdout.\n *\n * INFO is `true` if\n *\n * - MUTE is `false`\n * - and\n *   - INFO is set in the environment variable and the value is not `false`\n *   - or LOG is `true`\n *   - or WARN is `true`\n *   - or ERROR is `true`\n *   - or DEBUG is `true`\n *   - or VERBOSE is `true`\n *\n * @type {Boolean}\n */\nexport const INFO = defaultLogLevels.get( 'INFO' );\n"],"sourceRoot":"/source/"}